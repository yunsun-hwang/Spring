1. pom.xml 기본 버전 확인하기
    - java
    - spring

<java-version>1.8</java-version>
<org.springframework-version>5.3.26</org.springframework-version>

<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.5.1</version>
                <configuration>
                    <source>${java-version}</source>
                    <target>${java-version</target>
                    <compilerArgument>-Xlint:all</compilerArgument>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                </configuration>
            </plugin>

2. db 사용을 위한 dependency 추가하기 - pom.xml
    - mysql
    - spring-jdbc
<!--DB 관련, Maven에서 검색해서 추가  -->
		<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
		<dependency>
		    <groupId>mysql</groupId>
		    <artifactId>mysql-connector-java</artifactId>
		    <version>8.0.32</version>
		</dependency>

		<!-- DB-jdbc, Maven에서 검색해서 추가 -->		
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-jdbc</artifactId>
		    <version>${org.springframework-version}</version>
		</dependency>
3. root-context, servlet-context 변경
    - component-scan 적용
    
    servlet-context.xml
<context:component-scan base-package="com.ssafy.sample.controller" />

4. web.xml
    - 한글 인코딩 추가하기
<java-version>1.8</java-version>
<org.springframework-version>5.3.26</org.springframework-version>
<org.aspectj-version>1.6.10</org.aspectj-version>
<org.slf4j-version>1.6.6</org.slf4j-version>

<!-- POST 방식의 한글 처리. -->
<filter>
    <filter-name>encodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
 </filter>
 
 <filter-mapping>
    <filter-name>encodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
 </filter-mapping>

5.Controller
@Controller
public class TodoController {	
	private final TodoService todoService;
//	@Autowired 생성자가 하나 이기 때문에 쓰지 않는다.
	public TodoController(TodoService todoService) {
		this.todoService = todoService;
	}
	
}
@Controller
public class HomeController {
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String home(Locale locale, Model model) {
		return "redirect:/todo/list";
	}
}

6. Service
@Service
public class TodoServiceImpl implements TodoService {
//	생성자 주입
	private final TodoDao todoDao;	
	public TodoServiceImpl(TodoDao todoDao) {
		this.todoDao = todoDao;
	}
}

7. Dao
@Repository
public class TodoDaoImpl implements TodoDao {
	private final DataSource dataSource;	
	public TodoDaoImpl(DataSource dataSource) {
		this.dataSource = dataSource;
	}

}

8. root-context.xml - DB
<bean id = "dataSource" class = "org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<property name = "driverClass" value = "com.mysql.cj.jdbc.Driver"></property>
		<property name = "url" value = "jdbc:mysql://127.0.0.1:3306/ssafysupplement?serverTimezone=UTC&amp;useUniCode=yes&amp;characterEncoding=UTF-8"></property>
		<property name = "username" value = "ssafy"></property>
		<property name = "password" value = "ssafy"></property>
	</bean>

9. root-context.xml - Dao, Service bean으로 등록
<!-- TODO : 데이터베이스 연결 설정, 컴포넌트 스캔 설정 -->
	<context:component-scan base-package="com.ssafy.todomvc.model"></context:component-scan>

10. servlet-context.xml
<!-- 컴퍼넌트 스캔 설정 -->
<context:component-scan base-package="com.ssafy.todomvc.controller" />

11. Controller -> Service -> Dao